{
	// Place your iqac-frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "javascript,typescript",
		"prefix": "crgen",
		"body": [
			"import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { MyContext } from '../../../store/Store';\n// Tabs\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Redirect } from 'react-router';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`simple-tabpanel-index`}\n      aria-labelledby={`simple-tab-index`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-index`,\n    'aria-controls': `simple-tabpanel-index`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Criterion$1() {\n  const classes = useStyles();\n  const [step, setStep] = React.useState(1);\n  const {state, nextStep, prevStep, aboutUser, goToStep} =  React.useContext(MyContext);\n\n  React.useEffect(()=> {\n    aboutUser()\n  },[])\n\n  if(!state.isLoggedIn) {\n    return <Redirect to='/'/>\n  }\n  return (\n    <Container component='main' maxWidth='xs'>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5'>\n         Criterion $1\n        </Typography>\n        <Typography variant='body1' align='center'>\n      {state.stepLabel[state.step - 1]}\n      </Typography>\n      <div style={{'position': 'absolute', width : '100%', marginTop : '-50px'}}>\n        <Tabs value={state.step-1} onChange={(e, val)=>{\n          goToStep(val)\n          }} aria-label='simple tabs example'>\n          <Tab label='$1.1.1' {...a11yProps(0)} />\n        </Tabs>\n      </div>\n      <TabPanel value={state.step-1} index={0}>\n        <h1> Criterion $1</h1>\n      </TabPanel>\n       {/* {state.step === 1 && <StepOne/>}\n       {state.step === 2 && <StepTwo/>}\n       {state.step === 3 && <StepThree/>}\n       {state.step === 4 && <StepFour/>}\n       {state.step === 5 && <StepFive/>}\n       {state.step === 6 && <StepSix/>}\n       {state.step === 7 && <StepSeven/>}\n       {state.step > 7 && <FinalState/>} */}\n       <Grid container spacing={2}> \n        <Grid item xs={6} sm={6}>\n         <Button\n           // type='submit'\n           onClick={()=> prevStep()}\n            fullWidth\n            variant='contained'\n            color='primary'\n            className={classes.submit}\n            disabled={state.step <= 1}\n          >\n            {`Back : Step ${state.step - 1}`}\n          </Button>\n        </Grid>\n        <Grid item xs={6} sm={6}>\n        <Button\n           // type='submit'\n           onClick={()=> nextStep()}\n            fullWidth\n            variant='contained'\n            color='primary'\n            className={classes.submit}\n            disabled={state.step > 7}\n          >\n            {`Next : Step ${state.step}`}\n          </Button>\n        </Grid>\n       </Grid>\n      </div>\n    </Container>\n  );\n}\n"
		],
		"description": "Log output to console"
	}
}